Object subclass: #XMLNode	instanceVariableNames: 'name children'	classVariableNames: ''	package: 'CS370XML'!!XMLNode commentStamp: 'ElizabethMin 4/24/2020 10:47' prior: 0!Base class for all XML nodes in the XML hierarchy!!XMLNode methodsFor: 'accessing' stamp: 'ElizabethMin 4/24/2020 10:51'!getChildren	^ children.! !!XMLNode methodsFor: 'initialization' stamp: 'ElizabethMin 4/24/2020 13:55'!setName: aName 	name := aName.! !!XMLNode methodsFor: 'private' stamp: 'ElizabethMin 4/24/2020 10:51'!getName	^ name.! !!XMLNode methodsFor: 'adding' stamp: 'ElizabethMin 4/24/2020 15:12'!addChild: aNode	"will add a new node element to the list of child nodes"	(aNode isKindOf: XMLNode)		ifTrue: [ 			(children = nil) ifTrue: [ children := OrderedCollection new. ].			children add: aNode		]		ifFalse: [ Transcript cr; show: 'Object jtype not supported.' ].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!XMLNode class	instanceVariableNames: ''!!XMLNode class methodsFor: 'instance creation' stamp: 'ElizabethMin 4/24/2020 13:55'!new: aName	| node | 	node := self new. 	node setName: aName.	Transcript cr; show: node getName. 	^ node.! !XMLNode subclass: #XMLAttribute	instanceVariableNames: 'value'	classVariableNames: ''	package: 'CS370XML'!!XMLAttribute commentStamp: 'ElizabethMin 4/24/2020 11:07' prior: 0!Represents an attribute in the XML hierarchy. !!XMLAttribute methodsFor: 'printing' stamp: 'ElizabethMin 4/24/2020 14:05'!printString	"returns a string representation of the object"	^ (self getName), '="', (self getValue), '"'! !!XMLAttribute methodsFor: 'initialization' stamp: 'ElizabethMin 4/24/2020 11:08'!setValue: aValue	value := aValue. ! !!XMLAttribute methodsFor: 'as yet unclassified' stamp: 'ElizabethMin 4/24/2020 11:07'!getValue	^ value.! !XMLNode subclass: #XMLDocument	instanceVariableNames: 'properties'	classVariableNames: ''	package: 'CS370XML'!!XMLDocument commentStamp: 'ElizabethMin 4/24/2020 11:12' prior: 0!Represents a document in the XML hierarchy!!XMLDocument methodsFor: 'adding' stamp: 'ElizabethMin 4/24/2020 15:06'!addChild: aNode	"will add a new node element to the list of child nodes"	"overriden to allow elements to be children"	(aNode isKindOf: XMLElement)		ifTrue: [ 			(children = nil) ifTrue: [ children := OrderedCollection new. ].			children add: aNode		]		ifFalse: [ Transcript cr; show: 'Object tyjpe not supported.' ].! !!XMLDocument methodsFor: 'adding' stamp: 'ElizabethMin 4/24/2020 11:15'!addProperty: k newVal: aValue	(properties = nil)		ifTrue: [ 			properties := Dictionary new. ].	properties at: k put: aValue.! !!XMLDocument methodsFor: 'as yet unclassified' stamp: 'ElizabethMin 4/24/2020 11:12'!getProperties	^ properties.! !!XMLDocument methodsFor: 'printing' stamp: 'ElizabethMin 4/24/2020 16:27'!printString	"returns a string representation of the document object"	^ ('<', (self getName), '>', String cr,		(self getChildren)			select: [ :each | (each printString) ],		'</', (self getName), '>')			! !XMLNode subclass: #XMLElement	instanceVariableNames: 'value attributes'	classVariableNames: ''	package: 'CS370XML'!!XMLElement commentStamp: 'ElizabethMin 4/24/2020 11:05' prior: 0!Represents an element in the XML hierarchy. Elements are the children of documents (usually).!!XMLElement methodsFor: 'as yet unclassified' stamp: 'ElizabethMin 4/24/2020 10:58'!getValue	^ value.! !!XMLElement methodsFor: 'initialization' stamp: 'ElizabethMin 4/24/2020 11:03'!getAttributes	^ attributes.! !!XMLElement methodsFor: 'initialization' stamp: 'ElizabethMin 4/24/2020 10:59'!setValue: newValue	value := newValue.! !!XMLElement methodsFor: 'initialization' stamp: 'ElizabethMin 4/24/2020 11:07'!addAttribute: newAttribute	(newAttribute isKindOf: XMLAttribute)		ifTrue: [ 			(attributes = nil) ifTrue: [ attributes := OrderedCollection new.]. 		]		ifFalse: [ Transcript cr; show: 'Object type not supported'. ].! !!XMLElement methodsFor: 'printing' stamp: 'ElizabethMin 4/24/2020 14:42'!printString	"returns a string representation of the object"	^ [ 		"opening tag and element properties"		'<', (self getName), [ 			(self getAttributes)				select: [ :each | (each getString) ]. 		],		'>', String cr,		"prints for each of the children"		(self getChildren)			select: [ :each | (each printString) ],		"prints ending tag"		'</', (self getName), '>'		].			! !